import { Subscriber } from '../db/models/Subscriber';
import { sendTelegram } from '../services/telegram';
import { Employee } from '../db/models/Employee';
import { Candidate } from '../db/models/Candidate';
import { Notification } from '../db/models/Notification';

const TZ = process.env.APP_TZ || 'Europe/Kyiv';

function hmInTZ(d: Date, tz: string) {
  const fmtHM = new Intl.DateTimeFormat('ru-RU', { timeZone: tz, hour: '2-digit', minute: '2-digit', hour12: false });
  const [h, m] = fmtHM.format(d).split(':').map(Number);
  const fmtDay = new Intl.DateTimeFormat('en-CA', { timeZone: tz, year: 'numeric', month: '2-digit', day: '2-digit' });
  const dayKey = fmtDay.format(d);
  return { h, m, dayKey };
}

function mdInTZ(d: Date, tz: string) {
  const parts = new Intl.DateTimeFormat('en-GB', { timeZone: tz, month: '2-digit', day: '2-digit' }).formatToParts(d);
  const mm = parts.find(p => p.type === 'month')!.value;
  const dd = parts.find(p => p.type === 'day')!.value;
  return `${mm}-${dd}`;
}

function fmtKyiv(d: Date) {
  return new Intl.DateTimeFormat('ru-RU', { timeZone: TZ, dateStyle: 'short', timeStyle: 'short' }).format(d);
}

// 1Ô∏è‚É£ –†–æ–≤–Ω–æ –æ–¥–∏–Ω —Ä–∞–∑ ¬´–∑–∞ —á–∞—Å¬ª –±–µ–∑ reminded1hAt: —á–µ—Ä–µ–∑ —É–Ω–∏–∫–∞–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å –≤ Notification
export async function runMeets1hOnce() {
  const now = Date.now();
  const target = new Date(now + 60 * 60 * 1000);
  // –ù–µ–±–æ–ª—å—à–æ–µ –æ–∫–Ω–æ, —á—Ç–æ–±—ã –æ–¥–∏–Ω —Ä–∞–∑ –ø–æ–π–º–∞—Ç—å ¬´—Ä–æ–≤–Ω–æ –∑–∞ —á–∞—Å¬ª
  const from = new Date(target.getTime() - 90 * 1000);
  const to   = new Date(target.getTime() + 90 * 1000);

  const subs = await Subscriber.find({ enabled: true }).lean();
  if (!subs.length) return { checked: 0, matched: 0, delivered: 0, items: [], note: 'no subscribers' };

  // –ë–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ ¬´—à–∞–ø–∫—É¬ª –∏–Ω—Ç–µ—Ä–≤—å—é –∏ —Å—Ä–∞–∑—É —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –æ–∫–Ω—É
  const candidates = await Candidate.find(
    { 'interviews.0.scheduledAt': { $gte: from, $lte: to } },
    { fullName: 1, email: 1, interviews: { $slice: 1 } }
  ).lean();

  let checked = 0, matched = 0, delivered = 0;
  const items: Array<{ id: string; when: string; name: string; sent: boolean }> = [];

  for (const c of candidates) {
    const head: any = Array.isArray(c.interviews) ? c.interviews[0] : null;
    if (!head?.scheduledAt) continue;

    const when = new Date(head.scheduledAt);
    if (isNaN(+when)) continue;

    checked++;

    // –ò–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω—ã–π –º–∞—Ä–∫–µ—Ä (—É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á): –æ–¥–∏–Ω —Ä–∞–∑ –Ω–∞ (candidateId, scheduledAt, 'meet_1h')
    const expiresAt = new Date(when.getTime() + 3 * 60 * 60 * 1000); // –∑–∞–ø–∞—Å
    try {
      await Notification.create({
        scope: 'crm',
        candidateId: c._id,
        scheduledAt: when,
        kind: 'meet_1h',
        expiresAt,
      });
    } catch (e: any) {
      // E11000 ‚Äî —É–∂–µ –≤—Å—Ç–∞–≤–ª—è–ª–∏ ‚Üí –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
      if (e && e.code === 11000) continue;
      throw e;
    }

    matched++;

    const label = (c as any).fullName || (c as any).email || `–ö–∞–Ω–¥–∏–¥–∞—Ç ${c._id}`;
    const link  = head.meetLink ? `\n${head.meetLink}` : '';
    const text  = `‚è∞ –ß–µ—Ä–µ–∑ 1 —á–∞—Å –∑–≤–æ–Ω–æ–∫:\n‚Ä¢ ${fmtKyiv(when)} ‚Äî ${label}${link}`;

    let sent = false;
    for (const s of subs) {
      try { await sendTelegram(s.chatId, text); sent = true; delivered++; } catch {}
    }

    items.push({ id: String(c._id), when: when.toISOString(), name: label, sent });
  }

  const summary = { checked, matched, delivered, items };
  console.log('[MEET1H]', summary);
  return summary;
}

export function startSchedulers() {
  // –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å—ã (unique + TTL) –¥–ª—è Notification
  Notification.syncIndexes().catch(() => {});

  let last09Key = '';
  let last12Key = '';

  setInterval(async () => {
    try {
      const now = new Date();
      const { h, m, dayKey } = hmInTZ(now, TZ);

      if (h === 9 && m === 0 && dayKey !== last09Key) {
        last09Key = dayKey;
        await notifyBirthdaysToday();
      }
      if (h === 12 && m === 0 && dayKey !== last12Key) {
        last12Key = dayKey;
        await notifyBirthdaysIn7Days();
      }

      await runMeets1hOnce();
    } catch (e) {
      console.warn('[SCHED] cycle error:', (e as any)?.message || e);
    }
  }, 30_000);
}

async function notifyBirthdaysToday() {
  const todayMD = mdInTZ(new Date(), TZ);
  const employees = await Employee.find({ birthdayAt: { $ne: null } }).lean();
  const todays = employees.filter((e: any) => mdInTZ(new Date(e.birthdayAt), TZ) === todayMD);
  if (!todays.length) return;

  const subs = await Subscriber.find({ enabled: true }).lean();
  if (!subs.length) return;

  const list = todays.map(displayName).map(n => `‚Ä¢ ${n}`).join('\n');
  const text = `üéâ –°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è:\n${list}`;
  for (const s of subs) { try { await sendTelegram(s.chatId, text); } catch {} }
}

async function notifyBirthdaysIn7Days() {
  const target = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000);
  const targetMD = mdInTZ(target, TZ);

  const employees = await Employee.find({ birthdayAt: { $ne: null } }).lean();
  const soon = employees.filter((e: any) => mdInTZ(new Date(e.birthdayAt), TZ) === targetMD);
  if (!soon.length) return;

  const subs = await Subscriber.find({ enabled: true }).lean();
  if (!subs.length) return;

  const list = soon.map(displayName).map(n => `‚Ä¢ ${n}`).join('\n');
  const text = `üìÖ –†–æ–≤–Ω–æ —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è:\n${list}`;
  for (const s of subs) { try { await sendTelegram(s.chatId, text); } catch {} }
}

function displayName(e: any) {
  return (e.fullName as string) || [e.lastName, e.firstName, e.middleName].filter(Boolean).join(' ') || '–°–æ—Ç—Ä—É–¥–Ω–∏–∫';
}