// src/routes/telegram.routes.ts
import { Router } from 'express';
import type { Request, Response } from 'express';
import { Subscriber } from '../db/models/Subscriber';
import { sendTelegramMessage } from '../utils/telegram';

export const telegramRouter = Router();

/**
 * –í–µ–±—Ö—É–∫ Telegram. URL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–æ–≤–Ω–æ:
 * https://<–¥–æ–º–µ–Ω>/telegram/webhook/<TOKEN>
 */
telegramRouter.post('/telegram/webhook/:token', async (req: Request, res: Response) => {
  try {
    const token = req.params.token;
    if (!process.env.TELEGRAM_BOT_TOKEN || token !== process.env.TELEGRAM_BOT_TOKEN) {
      return res.status(401).json({ ok: false });
    }

    const update = req.body;
    const msg = update?.message;
    if (msg && msg.chat && msg.text) {
      const id = msg.chat.id;
      if (typeof id === 'number' || typeof id === 'string') {
        const chatId = Number(id);

        // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ –ø—Ä–∏ /start
        if (String(msg.text).startsWith('/start')) {
          await Subscriber.updateOne(
            { chatId },
            {
              $set: {
                username: msg.chat.username || '',
                firstName: msg.chat.first_name || '',
                lastName: msg.chat.last_name || ''
              }
            },
            { upsert: true }
          );

          // –æ—Ç–ø—Ä–∞–≤–∏–º –ø—Ä–∏–≤–µ—Ç (–ø–æ–ª–µ–∑–Ω–æ —É–≤–∏–¥–µ—Ç—å, —á—Ç–æ –¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è)
          try { await sendTelegramMessage(chatId, '‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞. –ë—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.'); } catch {}
        }
      }
    }
    return res.json({ ok: true });
  } catch {
    // Telegram –∂–¥—ë—Ç 200, –∏–Ω–∞—á–µ –Ω–∞—á–Ω—ë—Ç —Ä–µ—Ç—Ä–∞–∏—Ç—å ‚Äî –ø–æ—ç—Ç–æ–º—É 200
    return res.status(200).json({ ok: true });
  }
});

/** –ù–ï –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ. –í—Ä–µ–º–µ–Ω–Ω—ã–π –¥–µ–±–∞–≥-—Ä–æ—É—Ç ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –≤—Ä—É—á–Ω—É—é.
 * –£–¥–∞–ª–∏/–∑–∞–∫—Ä–æ–π –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏. –ü—Ä–æ—Å—Ç–µ–π—à–∞—è –∑–∞—â–∏—Ç–∞ ‚Äî —Ç–æ–∫–µ–Ω –≤ query.
 * GET /telegram/test?token=<BOT_TOKEN>&chatId=123
 */
telegramRouter.get('/telegram/test', async (req, res) => {
  if (req.query.token !== process.env.TELEGRAM_BOT_TOKEN) return res.status(401).json({ ok:false });
  const chatId = Number(req.query.chatId);
  if (!chatId) return res.status(400).json({ ok:false, error: 'chatId required' });
  try {
    await sendTelegramMessage(chatId, 'üîî Test message from CRM');
    return res.json({ ok:true });
  } catch (e:any) {
    return res.status(500).json({ ok:false, error: String(e?.message || e) });
  }
});